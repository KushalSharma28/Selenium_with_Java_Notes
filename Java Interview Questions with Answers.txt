1. Explain the difference between `==` and `.equals()` in Java.

== operator:

-Compares primitive values by their actual value (e.g., int a = 5; int b = 5; a == b → true).

-For objects, it compares memory references (whether two references point to the same object in memory).

Example:
String s1 = new String("hello");
String s2 = new String("hello");
System.out.println(s1 == s2); // false (different memory locations)

.equals() method:

-Defined in the Object class and can be overridden (e.g., in String, Integer).

-Compares the content or logical equality of objects.

Example:
String s1 = new String("hello");
String s2 = new String("hello");
System.out.println(s1.equals(s2)); // true (same content)

=============================================================================================================

2. Describe the purpose of `final`, `finally`, and `finalize()`.

final:

Variable: Value cannot be changed (constant).
Example: final int x = 10;

Method: Cannot be overridden in a subclass.
Example: public final void display() {}

Class: Cannot be extended (no subclasses allowed).
Example: public final class MyClass {}

finally:

A block in try-catch that always executes (used for cleanup like closing resources).

Example:
try { /* code */ } 
catch (Exception e) { /* handle */ } 
finally { /* always runs */ }

finalize():

A method in Object class called by the garbage collector before destroying an object.

Rarely used (deprecated in Java 9+ due to unpredictability).

=============================================================================================================

3. Can a Java class implement multiple interfaces? Explain.

Yes, a Java class can implement multiple interfaces (but can extend only one class).

Example:
interface A { void foo(); }
interface B { void bar(); }
class C implements A, B {
    public void foo() {}
    public void bar() {}
}

=============================================================================================================

4. Explain polymorphism with an example.

Polymorphism allows one interface to represent different underlying forms (e.g., method overloading/overriding).

Example (Runtime Polymorphism via Method Overriding):
class Animal {
    void sound() { System.out.println("Animal sound"); }
}
class Dog extends Animal {
    @Override
    void sound() { System.out.println("Bark"); }
}
public class Main {
    public static void main(String[] args) {
        Animal a = new Dog(); // Upcasting
        a.sound(); // Output: Bark (Dog's method called)
    }
}

=============================================================================================================

5. What are constructors? Describe different types of constructors in Java.

Constructors initialize objects when they are created.

Default Constructor: No arguments; provided by Java if no constructor is defined.
class A { 
    A() { } // Default
}

Parameterized Constructor: Takes arguments to initialize fields.
class B {
    int x;
    B(int x) { this.x = x; }
}

Copy Constructor: Creates an object using another object of the same class.
class C {
    int x;
    C(C obj) { this.x = obj.x; }
}


=============================================================================================================

6. Write a Java method to remove duplicate characters from a string.

public static String removeDuplicates(String str) {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < str.length(); i++) {
        char c = str.charAt(i);
        if (sb.indexOf(String.valueOf(c)) == -1) {
            sb.append(c);
        }
    }
    return sb.toString();
}

// Example:
System.out.println(removeDuplicates("hello")); // "helo"

=============================================================================================================

7. Write a Java program to find the second-highest number in an integer array.

public static int findSecondHighest(int[] arr) {
    if (arr.length < 2) {
        throw new IllegalArgumentException("Array too small");
    }
    int first = Integer.MIN_VALUE;
    int second = Integer.MIN_VALUE;
    for (int num : arr) {
        if (num > first) {
            second = first;
            first = num;
        } else if (num > second && num != first) {
            second = num;
        }
    }
    return second;
}

// Example:
int[] arr = {12, 35, 1, 10, 34, 1};
System.out.println(findSecondHighest(arr)); // 34

=============================================================================================================

8. Does Map Support Null Keys?

HashMap: Supports one null key (keys must be unique).

TreeMap: Does not support null keys (throws NullPointerException because it requires natural ordering/comparison).

ConcurrentHashMap: Does not allow null keys/values (for thread safety).

=============================================================================================================

9. Can We Declare a Constructor static in Java?

No, constructors are implicitly called when an object is created, so they cannot be static.

static belongs to the class, while constructors initialize instance members.

=============================================================================================================

10. Can We Override and Overload Static Methods in Java?

Overriding: No, static methods are class-level (resolved at compile-time via static binding).
class Parent { static void foo() {} }
class Child extends Parent { 
    static void foo() {} // Hiding (not overriding)
}
Overloading: Yes, same method name with different parameters.

=============================================================================================================

11. Can We Create public static final Variables in Java?

Yes, they act as global constants.
public class Constants {
    public static final int MAX_VALUE = 100;
}

=============================================================================================================

12. Calling Constructors of Other/Same Class

Same Class: Use this() (must be the first statement).
class A {
    A() { this(10); } // Calls parameterized constructor
    A(int x) { }
}

Other Class: Use super() (for parent class constructor).
class B extends A {
    B() { super(); } // Calls A's constructor
}
=============================================================================================================

13. Can a Constructor Be Private?
Yes, for Singleton or Factory patterns:
class Singleton {
    private Singleton() {}
    public static Singleton getInstance() { return new Singleton(); }
}

=========================================================================================

14. Implementing Few Methods from Multiple Interfaces
Use an abstract class to provide partial implementation:
interface A { void m1(); void m2(); }
interface B { void m3(); }
abstract class C implements A, B {
    public void m1() {} // Implement only m1
}
class D extends C {
    // Must implement remaining (m2, m3)
}

=========================================================================================

15. HashMap Sorting with Null Key

Map<String, Integer> map = new HashMap<>();
map.put("b", 2);
map.put(null, 0); // Null key
map.put("a", 1);

// Sort keys (handle null first)
List<String> keys = new ArrayList<>(map.keySet());
keys.sort(Comparator.nullsFirst(Comparator.naturalOrder()));

// Sorted Map (LinkedHashMap preserves order)
Map<String, Integer> sortedMap = new LinkedHashMap<>();
for (String key : keys) {
    sortedMap.put(key, map.get(key));
}
System.out.println(sortedMap); // {null=0, a=1, b=2}

=========================================================================================

16. Staircase Problem (Fibonacci Series)
public int climbStairs(int n) {
    if (n <= 2) return n;
    int[] dp = new int[n + 1];
    dp[1] = 1; // 1 way for 1 stair
    dp[2] = 2; // 2 ways for 2 stairs
    for (int i = 3; i <= n; i++) {
        dp[i] = dp[i - 1] + dp[i - 2]; // Fibonacci logic
    }
    return dp[n];
}
// climbStairs(3) → 3 (1+1+1, 1+2, 2+1)

=========================================================================================
