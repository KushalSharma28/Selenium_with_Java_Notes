Selenium WebDriver

* How do you locate elements using XPath?

Absolute XPath: /html/body/div[1]/form/input[1] (starts from root)

Relative XPath: //input[@name='username'] (more flexible)

Using attributes: //*[@id='loginBtn']

Using text: //button[text()='Login']

Using contains: //div[contains(@class,'error')]

=========================================================================================

* What is the difference between `driver.findElement()` and `driver.findElements()`?

findElement(): Returns the first matching web element (throws NoSuchElementException if not found)

findElements(): Returns a list of all matching web elements (returns empty list if none found)

=========================================================================================

* How do you handle dynamic web elements in Selenium?

Explicit Waits: Wait for specific conditions

WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
WebElement element = wait.until(ExpectedConditions.presenceOfElementLocated(By.id("dynamicElement")));

Relative XPaths: Avoid absolute paths that might change

CSS Selectors: Often more stable than XPath

Using starts-with/contains: For dynamic IDs/classes

JavaScript execution: As a fallback

=========================================================================================

* Explain how to handle dropdowns and alerts using Selenium WebDriver.

Dropdowns:
Select dropdown = new Select(driver.findElement(By.id("dropdown")));

// Select by visible text
dropdown.selectByVisibleText("Option 1");

// Select by value
dropdown.selectByValue("option1");

// Select by index
dropdown.selectByIndex(0);

Alerts:

// Switch to alert
Alert alert = driver.switchTo().alert();

// Accept (OK)
alert.accept();

// Dismiss (Cancel)
alert.dismiss();

// Get text
String alertText = alert.getText();

// Send text (for prompts)
alert.sendKeys("text");

=========================================================================================

* how to find list of multiple web elements in selenium

find 20 web elements

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

import java.util.List;

public class Find20Elements 
{
    public static void main(String[] args) 
    {
        // Set up WebDriver (adjust the path to your driver executable)
        System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");
        WebDriver driver = new ChromeDriver();

        // Open the desired webpage
        driver.get("https://example.com");

        // Find elements using a common locator, like class name, tag name, etc.
        List<WebElement> elements = driver.findElements(By.cssSelector(".example-class"));

        // Ensure you only get the first 20 elements if more are found
        int count = Math.min(elements.size(), 20);
        for (int i = 0; i < count; i++) 
        {
            WebElement element = elements.get(i);
            System.out.println("Element " + (i + 1) + ": " + element.getText());
        }

        // Close the driver
        driver.quit();
    }
}

find multiple web elements

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

import java.util.List;

public class FindMultipleElements 
{
    public static void main(String[] args) 
    {
        // Set up WebDriver (adjust the path to your driver executable)
        System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");
        WebDriver driver = new ChromeDriver();

        // Open the desired webpage
        driver.get("https://example.com");

        // Find multiple elements using a locator, e.g., class name
        List<WebElement> elements = driver.findElements(By.className("example-class"));

        // Print the size and details of each element
        System.out.println("Number of elements found: " + elements.size());
        for (WebElement element : elements) 
        {
            System.out.println(element.getText());
        }

        // Close the browser
        driver.quit();
    }
}
=========================================================================================

* Write scroll function to find the scroll web element

scrollIntoView()  function scrolls the page until the specified element is visible.

     JavascriptExecutor js = (JavascriptExecutor) driver;
     js.executeScript("window.scrollTo(0, document.body.scrollHeight)");

js.executeScript("window.scrollTo(0, document.body.scrollHeight)"); executes the JavaScript code to scroll to the bottom of the page. document.body.scrollHeight gets the total height of the page, and window.scrollTo scrolls to that position.

     WebElement element = driver.findElement(By.id("targetElement")); // Find the element
     ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", element);

((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", element); scrolls the page so that the element is visible. scrollIntoView(true) scrolls the element into view at the top of the page.

=========================================================================================

* Which version of selenium are you using and why?

Selenium 4 is the latest stable version as of now, and it introduces new features like the WebDriver BiDi protocol, relative locators, and an improved Grid architecture. If you're working on new projects or want the latest features, Selenium 4 is highly recommended.

BiDirectional (BiDi) Protocol Support: Enabling advanced browser interaction.

Relative Locators: Simplifies locating elements in relation to others.

Improved Grid System: Better distributed test execution.

Compatibility with modern browsers.

=========================================================================================

* How can we find broken links in Selenium?

We will extract all anchor tag elements, store in a list, iterate the list, get the URL using "href" attribute, open the HTTP connection, get the response, if response over 400, the link is broken.

* What if we have more than 2000 links in web page, how can you reduce time?

we can use HashSet and add all the unique URLs into it. By doing so, there will be less links to connect and time would be reduced.

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class CheckBrokenLinks 
{
	public static WebDriver driver;
    public static void main(String[] args) 
    {
        // Initialize the driver
        System.setProperty("webdriver.chrome.driver", "path/to/chromedriver"); // Set the path to your ChromeDriver
        driver = new ChromeDriver();
        // Navigate to webpage
        driver.get("https://demoqa.com/links");
        // Find all the anchor elements
        List<WebElement> linkElements = driver.findElements(By.tagName("a"));
        Set<String> links = new HashSet<>();
        
        for (WebElement element : linkElements) 
        {
            String url = element.getAttribute("href"); // Use getAttribute instead of getDomAttribute
            links.add(url); // Collecting non-duplicate URLs
        }
        ExecutorService executor = Executors.newFixedThreadPool(50);
        for (String link : links) { // Iterate over all the links
            executor.submit(() -> verifyLink(link));
        }
        executor.shutdown();
        
     // Close the driver
        driver.quit();
    }
    public static void verifyLink(String url) 
    {
        // Open connection with links
        try {
            URL link = new URL(url);
            HttpURLConnection connection = (HttpURLConnection) link.openConnection();
            connection.setConnectTimeout(3000);
            connection.connect();
            if (connection.getResponseCode() >= 400) { // Check if the links are responding with a 400+ status code
                System.out.println(url + " - " + connection.getResponseMessage() + " - is broken");
            }
        } catch (Exception e) {
            System.out.println(url + " is broken");
        }
    }
}

=========================================================================================
TestNG Basics

* List some common TestNG annotations you use.

@Test - Marks a method as test method

@BeforeSuite/@AfterSuite - Runs before/after all tests in suite

@BeforeTest/@AfterTest - Runs before/after all tests in <test> tag

@BeforeClass/@AfterClass - Runs before/after all tests in class

@BeforeMethod/@AfterMethod - Runs before/after each test method

@DataProvider - Provides data for data-driven tests

@Parameters - For parameterized tests

@Listeners - For custom listeners

=========================================================================================

* How do you set test execution priority in TestNG?

Lower priority numbers run first. Tests without priority run alphabetically.

@Test(priority = 1)
public void firstTest() {
    // Test code
}

@Test(priority = 2)
public void secondTest() {
    // Test code
}

=========================================================================================

* Explain how to run tests in parallel using TestNG.

Parallel options:

methods: Run test methods in parallel

tests: Run different <test> tags in parallel

classes: Run test classes in parallel

instances: Run instances in parallel

In TestNG XML:
<suite name="Parallel Suite" parallel="methods" thread-count="5">
<test name="Parallel Tests">
    <classes>
        <class name="com.example.TestClass"/>
    </classes>
</test>
</suite>

=========================================================================================

* How do you generate and customize reports in TestNG?

=========================================================================================
Real-Time Scenario

Scenario: Automating a login page where the login button sometimes takes time to appear.
Question: How will you handle such a scenario in your automation script using Selenium best practices?

public void login(String username, String password) {
    driver.findElement(By.id("username")).sendKeys(username);
    driver.findElement(By.id("password")).sendKeys(password);
    
    // Wait for login button to be clickable
    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
    WebElement loginButton = wait.until(ExpectedConditions.elementToBeClickable(By.id("loginBtn")));
    
    loginButton.click();
    
    // Then wait for next page to load
    wait.until(ExpectedConditions.urlContains("dashboard"));
}

=========================================================================================

* Why Use Constructors in Selenium?

Initialize WebDriver, Page Objects, or test data.
public class LoginTest {
    WebDriver driver;
    public LoginTest() {
        driver = new ChromeDriver();
    }
}

=========================================================================================

* Running a Test Method/Class 100 Times

TestNG: Use invocationCount.
@Test(invocationCount = 100)
public void testMethod() {}

=========================================================================================

* Does priority in TestNG Support Negative/Zero Values?

Yes, priorities can be negative, zero, or positive.
@Test(priority = -1) // Runs first
@Test(priority = 0)  // Runs next

=========================================================================================

* Parameterized Testing in TestNG

@Parameters (XML-driven):
@Test
@Parameters({"username", "password"})
public void login(String user, String pass) {}

@DataProvider (Java-driven):
@DataProvider
public Object[][] data() { return new Object[][]{{"user1"}, {"user2"}}; }
@Test(dataProvider = "data")
public void test(String user) {}

=========================================================================================

* @BeforeTest vs @BeforeClass
@BeforeTest: Runs once per <test> tag in XML
Suite → Test → Class → Method

@BeforeClass: Runs once per test class
Class → Method

=========================================================================================

* Writing a Data Provider in TestNG
@DataProvider(name = "loginData")
public Object[][] provideData() {
    return new Object[][]{
        {"user1", "pass1"},
        {"user2", "pass2"}
    };
}
@Test(dataProvider = "loginData")
public void loginTest(String user, String pass) {}

=========================================================================================

* Groups in TestNG
Group tests for selective execution:
@Test(groups = {"smoke"})
public void smokeTest() {}

Run via XML:
<groups>
    <run><include name="smoke"/></run>
</groups>

=========================================================================================

* Waits in Selenium
Implicit Wait	Global wait for element presence (driver.manage().timeouts().implicitlyWait).
Explicit Wait	Condition-based (WebDriverWait + ExpectedConditions).
Fluent Wait	Polling with custom conditions.

=========================================================================================

* Parallel Execution in Selenium
TestNG XML:
<suite name="Suite" parallel="methods" thread-count="5">
    <test name="Test">
        <classes>
            <class name="TestClass"/>
        </classes>
    </test>
</suite>

Selenium Grid: Distribute tests across nodes.

=========================================================================================

* Running Selenium Tests in Jenkins
1. Install Jenkins plugins (Git, Maven, TestNG).

2. Create a Jenkins job:

 - Source Code Management: Git repo URL.

 - Build Trigger: Poll SCM or webhook.

 - Build: mvn clean test.

3. Publish TestNG reports using Post-build Actions.

=========================================================================================

* Difference between NoSuchElementException and StaleElementReferenceException

NoSuchElementException: Thrown when Selenium cannot find an element on the page using the specified locator. This typically happens when the element doesn't exist in the DOM or hasn't loaded yet.

StaleElementReferenceException: Thrown when you have a reference to a web element that is no longer attached to the DOM (the page has changed or refreshed since the element was located). The element was found but became "stale" before you interacted with it.

=========================================================================================

* If a developer removes a locator from the DOM at runtime

StaleElementReferenceException will be thrown when you try to interact with that element after it's been removed.
=========================================================================================

* Different types of exceptions thrown in Selenium:

Common Selenium exceptions include:

NoSuchElementException: Element not found

StaleElementReferenceException: Element reference is stale

ElementNotVisibleException: Element exists but isn't visible

ElementNotInteractableException: Element exists but can't be interacted with

TimeoutException: Operation timed out

NoSuchWindowException: Window not found

NoSuchFrameException: Frame not found

NoAlertPresentException: Alert not found

UnexpectedTagNameException: Wrong tag name for the operation

MoveTargetOutOfBoundsException: Action would move outside valid area

InvalidSelectorException: Invalid CSS/XPath selector

WebDriverException: Base exception for all WebDriver errors

=========================================================================================

* Automating a responsive table to print the second-highest price dynamically

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class SecondHighestPriceTable {
    public static void main(String[] args) {
        // Set the path to your ChromeDriver
        System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");
        WebDriver driver = new ChromeDriver();

        try {
            // Navigate to the webpage with the responsive table
            driver.get("https://example.com/your-table-page");

            // Find all price elements in the table (adjust the locator as needed)
            List<WebElement> priceElements = driver.findElements(By.xpath("//table//td[contains(@class,'price')]"));

            // Extract prices and convert to Double
            List<Double> prices = new ArrayList<>();
            for (WebElement element : priceElements) {
                try {
                    String priceText = element.getText()
                            .replace("$", "")
                            .replace(",", "")
                            .trim();
                    double price = Double.parseDouble(priceText);
                    prices.add(price);
                } catch (NumberFormatException e) {
                    // Skip if price can't be parsed
                    continue;
                }
            }

            // Handle cases where we don't have enough prices
            if (prices.size() < 2) {
                System.out.println("Not enough prices found in the table");
                return;
            }

            // Sort in descending order and get unique values
            List<Double> uniquePrices = new ArrayList<>(new HashSet<>(prices));
            Collections.sort(uniquePrices, Collections.reverseOrder());

            // Get the second highest price
            double secondHighest = uniquePrices.size() > 1 ? uniquePrices.get(1) : uniquePrices.get(0);
            System.out.printf("Second highest price: $%.2f%n", secondHighest);

        } finally {
            // Close the browser
            driver.quit();
        }
    }
}
=========================================================================================
